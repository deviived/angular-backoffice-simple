@use "../colors";
@use '@angular/material' as mat;
@use '../styles.scss';

:host {
  @include mat.toolbar-overrides((
    container-background-color: var(--mat-sys-primary),
    container-text-color: var(--mat-sys-on-primary),
  ));
  @include mat.icon-overrides((
    color: var(--mat-sys-on-primary),
  ));
}

mat-nav-list {
  margin: 0.5rem;
  display: flex;
  flex-direction: column;
  gap: 0.2rem;
  font-size: 0.5rem;
}

.mat-drawer {
  width: 250px!important;
}

.container {
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.is-mobile .toolbar {
  position: fixed;
  /* Make sure the toolbar will stay on top of the content as it scrolls past. */
  z-index: 2;
}

.toolbar-content {
  display: flex;
  width: 100%;
  flex-direction: row;
  justify-content: space-between;
  > div {
    .mdc-button__label {
      color: whitesmoke;
    }
    > h1 {
      line-height: 1.8;
    }
    &:first-child {
      display: flex;
      flex-direction: row;
    }
    &:last-child {
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
  }
}

h1.app-name {
  margin-left: 8px;
}

.sidenav-container {
  /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This
     causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */
  flex: 1;
  background-color: var(--mat-sys-surface-container-high);
}

.is-mobile .sidenav-container {
  /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the
     `<body>` to be our scrolling element for mobile layouts. */
  flex: 1 0 auto;
}

/* Material card to stylish content routed from navbar */
.content {
  margin: 1rem;
  padding: 1rem;
  min-height: 20rem;
}