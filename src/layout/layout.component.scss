// @use "../colors";
@use '@angular/material' as mat;



// Customize the entire app. Change :root to your selector if you want to scope the styles.
app-layout {
  @include mat.toolbar-overrides((
    container-background-color: orange,
    container-text-color: red,
  ));

  @include mat.menu-overrides((
    item-label-text-color: orange,
    item-icon-color: red,
  ));
}

.mat-toolbar {
    // background-color: colors.$primary;
    color: whitesmoke;
    .mat-mdc-icon-button {
        color: whitesmoke;
    }
}

.mat-drawer {
    width: 250px!important;
}

.example-container {
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.example-is-mobile .example-toolbar {
  position: fixed;
  /* Make sure the toolbar will stay on top of the content as it scrolls past. */
  z-index: 2;
}

.toolbar-content {
  display: flex;
  width: 100%;
  flex-direction: row;
  justify-content: space-between;
  > div {
    .mdc-button__label {
      color: whitesmoke;
    }
    > h1 {
      line-height: 1.8;
    }
    display: flex;
    flex-direction: row;
  }
}

h1.example-app-name {
  margin-left: 8px;
}

.example-sidenav-container {
  /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This
     causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */
  flex: 1;
  background-color: whitesmoke;
}

.example-is-mobile .example-sidenav-container {
  /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the
     `<body>` to be our scrolling element for mobile layouts. */
  flex: 1 0 auto;
}

/* Material card to stylish content routed from navbar */
.content {
    margin: 1rem;
    padding: 1rem;
    min-height: 20rem;
}